openapi: 3.0.0
info:
  title: User Management API
  description: API endpoints for user management and role-based access control
  version: 1.0.0
  contact:
    name: TMS API Support
    email: support@tms.gov.in

tags:
  - name: User Management
    description: User management operations for super administrators

paths:
  /api/user-management/users:
    get:
      tags:
        - User Management
      summary: Get all users
      description: Retrieves a list of all users in the system (Super Admin only)
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of users per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: search
          in: query
          description: Search term for username or email
          required: false
          schema:
            type: string
        - name: role
          in: query
          description: Filter by user role
          required: false
          schema:
            type: string
            enum: [super_admin, admin, deo, sdeo, hoi, teacher]
        - name: is_active
          in: query
          description: Filter by active status
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      users:
                        type: array
                        items:
                          $ref: '#/components/schemas/User'
                      pagination:
                        $ref: '#/components/schemas/Pagination'
        '401':
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - Super Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags:
        - User Management
      summary: Create new user
      description: Creates a new user with specified role and details (Super Admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - password
                - role
              properties:
                username:
                  type: string
                  description: Unique username
                  example: "newuser"
                  minLength: 3
                  maxLength: 50
                email:
                  type: string
                  format: email
                  description: Email address
                  example: "newuser@tms.gov.in"
                phone:
                  type: string
                  description: Phone number (optional)
                  example: "9876543210"
                  pattern: "^[0-9]{10}$"
                password:
                  type: string
                  description: Password
                  example: "securepassword123"
                  minLength: 6
                role:
                  type: string
                  enum: [super_admin, admin, deo, sdeo, hoi, teacher]
                  description: User role
                  example: "deo"
                is_active:
                  type: boolean
                  description: Whether user account is active
                  default: true
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "User created successfully"
                  data:
                    $ref: '#/components/schemas/User'
        '400':
          description: Bad request - Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - Super Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Conflict - Username or email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/user-management/users/{id}:
    get:
      tags:
        - User Management
      summary: Get user by ID
      description: Retrieves a specific user by ID (Super Admin only)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - Super Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags:
        - User Management
      summary: Update user
      description: Updates an existing user's details (Super Admin only)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: Username
                  example: "updateduser"
                  minLength: 3
                  maxLength: 50
                email:
                  type: string
                  format: email
                  description: Email address
                  example: "updateduser@tms.gov.in"
                phone:
                  type: string
                  description: Phone number
                  example: "9876543210"
                  pattern: "^[0-9]{10}$"
                password:
                  type: string
                  description: New password (optional)
                  example: "newpassword123"
                  minLength: 6
                role:
                  type: string
                  enum: [super_admin, admin, deo, sdeo, hoi, teacher]
                  description: User role
                  example: "admin"
                is_active:
                  type: boolean
                  description: Whether user account is active
                  example: true
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "User updated successfully"
                  data:
                    $ref: '#/components/schemas/User'
        '400':
          description: Bad request - Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - Super Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Conflict - Username or email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - User Management
      summary: Delete user
      description: Soft deletes a user account (Super Admin only)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "User deleted successfully"
        '401':
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - Super Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/user-management/users/{id}/toggle-status:
    patch:
      tags:
        - User Management
      summary: Toggle user active status
      description: Activates or deactivates a user account (Super Admin only)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - is_active
              properties:
                is_active:
                  type: boolean
                  description: New active status
                  example: false
      responses:
        '200':
          description: User status updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "User status updated successfully"
                  data:
                    $ref: '#/components/schemas/User'
        '400':
          description: Bad request - Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - Super Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Session Management endpoints
  /api/users/sessions:
    get:
      tags:
        - User Management
      summary: Get user sessions
      description: Retrieves current user's active sessions
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Sessions retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Session'
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

  /api/users/sessions/{sessionId}:
    get:
      tags:
        - User Management
      summary: Get session information
      description: Retrieves information about a specific session
      security:
        - BearerAuth: []
      parameters:
        - name: sessionId
          in: path
          required: true
          description: Session token
          schema:
            type: string
      responses:
        '200':
          description: Session information retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Session'
        '404':
          description: Session not found
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

    delete:
      tags:
        - User Management
      summary: Revoke session
      description: Revokes a specific session
      security:
        - BearerAuth: []
      parameters:
        - name: sessionId
          in: path
          required: true
          description: Session token to revoke
          schema:
            type: string
      responses:
        '200':
          description: Session revoked successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Session revoked successfully"
        '404':
          description: Session not found
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

  /api/users/sessions/others:
    delete:
      tags:
        - User Management
      summary: Revoke other sessions
      description: Revokes all sessions except the current one
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Other sessions revoked successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Other sessions revoked successfully"
                  data:
                    type: object
                    properties:
                      revokedCount:
                        type: integer
                        description: Number of sessions revoked
                        example: 3
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          description: Unique user identifier
          example: 1
        username:
          type: string
          description: Username
          example: "admin"
        email:
          type: string
          description: Email address
          example: "admin@tms.gov.in"
        phone:
          type: string
          description: Phone number
          example: "9876543210"
        role:
          type: string
          enum: [super_admin, admin, deo, sdeo, hoi, teacher]
          description: User role
          example: "admin"
        is_active:
          type: boolean
          description: Whether user account is active
          example: true
        created_at:
          type: string
          format: date-time
          description: Account creation timestamp
          example: "2024-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2024-01-15T15:45:00Z"
      required:
        - id
        - username
        - email
        - role
        - is_active
        - created_at

    Pagination:
      type: object
      properties:
        page:
          type: integer
          description: Current page number
          example: 1
        limit:
          type: integer
          description: Items per page
          example: 10
        total:
          type: integer
          description: Total number of items
          example: 50
        pages:
          type: integer
          description: Total number of pages
          example: 5
        hasNext:
          type: boolean
          description: Whether there is a next page
          example: true
        hasPrev:
          type: boolean
          description: Whether there is a previous page
          example: false

    Session:
      type: object
      properties:
        id:
          type: string
          description: Session token ID
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        createdAt:
          type: string
          format: date-time
          description: Session creation timestamp
          example: "2024-01-15T10:30:00Z"
        expiresAt:
          type: string
          format: date-time
          description: Session expiration timestamp
          example: "2024-01-15T22:30:00Z"
        deviceId:
          type: string
          description: Device identifier
          example: "device-123"
        ipAddress:
          type: string
          description: IP address of the session
          example: "192.168.1.100"
        userAgent:
          type: string
          description: User agent string
          example: "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
        isActive:
          type: boolean
          description: Whether the session is currently active
          example: true

    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          description: Error message
          example: "An error occurred"
        error:
          type: string
          description: Detailed error information (development only)
          example: "Database connection failed"

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from login

security:
  - BearerAuth: []
